import pygame
import random

# Constants for screen size and grid size
SCREEN_SIZE = 640
GRID_SIZE = 20
GRID_WIDTH = SCREEN_SIZE // GRID_SIZE
GRID_HEIGHT = SCREEN_SIZE // GRID_SIZE
BOARD_BACKGROUND_COLOR = (0, 0, 0)

# Direction constants
UP = (0, -GRID_SIZE)
DOWN = (0, GRID_SIZE)
LEFT = (-GRID_SIZE, 0)
RIGHT = (GRID_SIZE, 0)


class GameObject:
    """Represents a general game object in the game."""

    def __init__(self, x=0, y=0, body_color=(255, 255, 255)):
        self.x = x
        self.y = y
        self.position = (x, y)
        self.body_color = body_color

    def draw(self, screen):
        """Draw the object on the screen."""
        raise NotImplementedError("Subclasses must implement draw method")


class Snake(GameObject):
    """Represents the Snake object in the game."""

    def __init__(self, x=SCREEN_SIZE // 2, y=SCREEN_SIZE // 2,
                 body_color=(0, 255, 0)):
        super().__init__(x, y, body_color)
        self.body = [self.position]
        self.direction = RIGHT

    def move(self):
        """Moves the snake in the current direction."""
        new_head = (
            self.body[0][0] + self.direction[0],
            self.body[0][1] + self.direction[1],
        )
        self.body = [new_head] + self.body[:-1]
        self.position = new_head

        # Check boundaries and reset if snake goes off-screen
        if not (0 <= new_head[0] < SCREEN_SIZE
                and 0 <= new_head[1] < SCREEN_SIZE):
            self.reset()

    def change_direction(self, direction):
        """Changes the direction of the snake."""
        if (direction[0] * -1, direction[1] * -1) != self.direction:
            self.direction = direction

    def grow(self):
        """Grows the snake by adding an additional segment."""
        self.body.append(self.body[-1])

    def reset(self):
        """Resets the snake to the starting position."""
        self.body = [(SCREEN_SIZE // 2, SCREEN_SIZE // 2)]
        self.direction = RIGHT
        self.position = self.body[0]

    def get_head_position(self):
        """Returns the position of the snake's head."""
        return self.body[0]

    def draw(self, screen):
        """Draws the snake on the screen."""
        for segment in self.body:
            pygame.draw.rect(
                screen, self.body_color,
                pygame.Rect(segment[0], segment[1], GRID_SIZE, GRID_SIZE)
            )


class Apple(GameObject):
    """Represents the Apple object in the game."""

    def __init__(self, x=0, y=0, body_color=(255, 0, 0)):
        super().__init__(x, y, body_color)
        self.randomize_position()

    def randomize_position(self):
        """Randomly relocates the apple on the screen."""
        self.x = random.randint(0, GRID_WIDTH - 1) * GRID_SIZE
        self.y = random.randint(0, GRID_HEIGHT - 1) * GRID_SIZE
        self.position = (self.x, self.y)

    def draw(self, screen):
        """Draws the apple on the screen."""
        pygame.draw.rect(
            screen, self.body_color,
            pygame.Rect(self.x, self.y, GRID_SIZE, GRID_SIZE)
        )


def main():
    """Main function to start the game."""
    pygame.init()
    screen = pygame.display.set_mode((SCREEN_SIZE, SCREEN_SIZE))
    pygame.display.set_caption("Snake Game")
    clock = pygame.time.Clock()

    snake = Snake()
    apple = Apple()

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    snake.change_direction(UP)
                elif event.key == pygame.K_DOWN:
                    snake.change_direction(DOWN)
                elif event.key == pygame.K_LEFT:
                    snake.change_direction(LEFT)
                elif event.key == pygame.K_RIGHT:
                    snake.change_direction(RIGHT)

        snake.move()

        # Check if snake has eaten the apple
        if snake.get_head_position() == apple.position:
            snake.grow()
            apple.randomize_position()

        # Drawing elements
        screen.fill(BOARD_BACKGROUND_COLOR)
        snake.draw(screen)
        apple.draw(screen)
        pygame.display.flip()

        clock.tick(10)

    pygame.quit()


if __name__ == "__main__":
    main()
